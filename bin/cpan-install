#!/bin/bash
[ -z "$HELPER_ROOT" ] && export HELPER_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
source "$HELPER_ROOT/lib/util.bash"

if [ -z "$MODERN_PERL" ]; then
  MODERN_PERL=perl
fi
PERL_VERSION="$(perl -e'print $] * 1_000_000')"

if [[ "$PERL_VERSION" -ge 5008000 ]]; then
  INSTALL_CMD="cpanm --verbose --no-interactive --no-man-pages --notest --skip-satisfied"
else
  INSTALL_CMD="cpan-installer"
fi
if which apt-get >/dev/null; then
  OS_UPDATE="sudo apt-get update"
  OS_INSTALLER="sudo apt-get install"
  OS_CHECKFILE="/var/lib/apt/periodic/update-success-stamp"
elif which brew >/dev/null; then
  OS_UPDATE="brew update"
  OS_INSTALLER="brew install"
  OS_CHECKFILE="$(brew --prefix)/.git/FETCH_HEAD"
else
  OS_INSTALLER="echo No installer available for "
fi

[ -n "$CPAN_MIRROR" ] && export PERL_CPANM_OPT="--mirror $CPAN_MIRROR $PERL_CPANM_OPT"
export PERL_AUTOINSTALL_PREFER_CPAN=1
export PERL_MM_USE_DEFAULT=1
export NONINTERACTIVE_TESTING=1
export PERL_MM_NONINTERACTIVE=1

[ "$AUTHOR_TESTING" -ne 0 ] && AUTHOR_OPTS='--with-develop'
unset AUTHOR_TESTING
unset RELEASE_TESTING
unset SMOKE_TESTING
unset CONTINUOUS_INTEGRATION

exec </dev/null

function os-install {
  local dep="$1"
  local mod
  local prereqs
  while read mod prereqs; do
    if [ "$mod" == "${dep/~*}" ]; then
      if [ -n "$OS_CHECKFILE" ]; then
        if [ ! -e "$OS_CHECKFILE" ] || [ -n "$(find "$OS_CHECKFILE" -mmin +50)" ]; then
          printf "Updating package manager ..."
          run-with-progress $OS_UPDATE
        fi
      fi
      for os_dep in $prereqs; do
        printf "Installing OS package $os_dep ..."
        run-with-progress $OS_INSTALLER "$os_dep" || true
      done
    fi
  done < $HELPER_ROOT/share/os-prereqs.txt
}

function cpan-installer {
  local dep="$1"
  local version=''
  local bare=''
  case "$dep" in
    *.git|*.git@*|git+*://*|git://*)
      cpan-git-install "$dep"
      return
    ;;
    *~*)
      version="${dep/*~/}"
      dep="${dep/~*/}"
    ;;
    */*)
      bare=1
    ;;
  esac
  if [ -z "$bare" ] && perl -e"use $dep $version ();" &>/dev/null; then
    return
  fi
  if perl -e'use CPAN 1.80 ();' &>/dev/null; then
    perl -MCPAN -e'notest(install => @ARGV) or exit 1' "$dep"
  else
    perl -MCPAN -e'force(install => @ARGV) or exit 1' "$dep"
  fi
}

function cpan-git-install {
  local dep="$1"
  local repo="${dep/@*/}"
  local branch="${dep/*@/}"
  if [ "$dep" == "$branch" ]; then
    branch=''
  else
    branch="--branch $branch"
  fi
  local clone_dir="$(mktemp -d -t local-lib-XXXXXX)/repo"
  git clone --depth 1 --single-branch "$repo" $branch "$clone_dir"
  cd "$clone_dir"
  $HELPER_ROOT/bin/build-dist build_dir
  cd build_dir
  install-items .
}

function install-module {
  for dep in "$@"; do
    os-install "$dep"
    printf "Installing (without testing) $dep ..."
    run-with-progress $INSTALL_CMD $dep
  done
}

function dynamic-deps {
  if [[ "$PERL_VERSION" -ge 5008000 ]]; then
    cpanm --showdeps -q . --with-recommends $AUTHOR_OPTS
  else
    $HELPER_ROOT/bin/cpan-prereqs
  fi
}

function get-deps {
  local PHASE=$1
  local TYPE=$2
  local META_FILE
  for meta in MYMETA.json MYMETA.yml META.json META.yml; do
    if [ -e "$meta" ]; then
      META_FILE="$meta"
      break
    fi
  done
  if [ -z "$META_FILE" ]; then
    return
  fi
  $MODERN_PERL -MCPAN::Meta -e'
    my ($file, $phase, $type) = @ARGV;
    my $prereq = CPAN::Meta->load_file($file)->effective_prereqs;
    my $req = $prereq->requirements_for($phase, $type)->as_string_hash;
    for my $module (sort keys %$req) {
      next if $module eq "perl";
      my $version = $req->{$module};
      print $module . ($version ? "~$version" : "") . "\n";
    }
  ' $META_FILE $PHASE $TYPE
}

function install-items {
  for arg in "$@"; do
    case $arg in
      --toolchain)
        install-module $($HELPER_ROOT/bin/modules-for-local-lib toolchain)
      ;;
      --deps)
        echo "Configure prerequisites:"
        for dep in $(get-deps configure requires); do
          install-module $dep
        done

        echo "Other prerequisites:"
        for dep in $(dynamic-deps); do
          case $dep in
            perl) ;;
            perl@*) ;;
            perl~*) ;;
            *)
              install-module $dep
            ;;
          esac
        done
      ;;
      --coverage)
        if [ "$COVERAGE" -eq 1 ]; then
          install-module Devel::Cover
          install-module Devel::Cover::Report::Coveralls
        fi
      ;;
      .)
        install-items --deps
        if [ -e 'Makefile' ]; then
          make install
        elif [ -e 'Build' ]; then
          ./Build install
        fi
      ;;
      *)
        install-module $arg
      ;;
    esac
  done
}

if [[ "$PERL_VERSION" -lt 5008000 ]]; then
  "$HELPER_ROOT/bin/cpan-config"
fi
install-items "$@"
if [[ "$PERL_VERSION" -lt 5008000 ]]; then
  "$HELPER_ROOT/bin/cpan-config"
fi
true
